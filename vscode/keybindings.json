// Place your key bindings in this file to override the defaults
// =============================
// VS Code Keybindings for Vim
// =============================
// File: keybindings.json (JSONC format supports comments)

[
  // =============================
  // ======= LEADER BINDS ========
  // =============================

  // Git view (Space + g g)
  {
    "key": "space g g",
    "command": "runCommands",
    "args": { "commands": ["workbench.view.scm", "workbench.scm.focus"] },
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Apply code actions / quick fixes (Space + c a)
  {
    "key": "space c a",
    "command": "editor.action.codeAction",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Rename symbol (Space + r n)
  {
    "key": "space r n",
    "command": "editor.action.rename",
    "when": "vim.mode == 'Normal' && editorHasRenameProvider && editorTextFocus && !editorReadonly"
  },

  // Go to symbol in file (Space + g s)
  {
    "key": "space g s",
    "command": "workbench.action.gotoSymbol",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Quick open file (Space + f f)
  {
    "key": "space f f",
    "command": "workbench.action.quickOpen",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Open command pallete (Space + f c)
  {
    "key": "space f c",
    "command": "workbench.action.showCommands",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Global search (Space + f g)
  {
    "key": "space f g",
    "command": "workbench.action.findInFiles",
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus)"
  },

  // Go to definition (Space + g d)
  {
    "key": "space g d",
    "command": "editor.action.revealDefinition",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Go to references (Space + g r)
  {
    "key": "space g r",
    "command": "editor.action.goToReferences",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Go to implementation (Space + g i)
  {
    "key": "space g i",
    "command": "editor.action.goToImplementation",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Go to previous diagnostic ( [ d )
  {
    "key": "[ d",
    "command": "editor.action.marker.prev",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Go to next diagnostic ( ] d )
  {
    "key": "] d",
    "command": "editor.action.marker.next",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Show documentation hover (Shift + K)
  {
    "key": "shift+k",
    "command": "editor.action.showHover",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // ================================
  // ======= WINDOW / PANE ==========
  // ================================

  // Move focus between editor panes (like Vim window nav)
  { "key": "ctrl+h", "command": "workbench.action.navigateLeft" },
  { "key": "ctrl+j", "command": "workbench.action.navigateDown" },
  { "key": "ctrl+k", "command": "workbench.action.navigateUp" },
  { "key": "ctrl+l", "command": "workbench.action.navigateRight" },

  // Split editor vertically (Space + s)
  {
    "key": "space s",
    "command": "workbench.action.splitEditorRight",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // Split editor horizontally (Space + v)
  {
    "key": "space v",
    "command": "workbench.action.splitEditorDown",
    "when": "vim.mode == 'Normal' && editorTextFocus"
  },

  // ========================
  // ======= BUFFERS ========
  // ========================

  // Next editor tab (Tab)
  {
    "key": "tab",
    "command": "workbench.action.nextEditorInGroup",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },

  // Previous editor tab (Shift + Tab)
  {
    "key": "shift+tab",
    "command": "workbench.action.previousEditorInGroup",
    "when": "(vim.mode == 'Normal' || vim.mode == 'Visual') && (editorTextFocus || !inputFocus)"
  },

  // ==========================
  // ======= FILE TREE ========
  // ==========================

  // Toggle and focus file explorer (Space + e)
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.files.action.focusFilesExplorer"
      ]
    },
    "when": "vim.mode == 'Normal' && (editorTextFocus || !inputFocus) && !sideBarFocus"
  },

  // Hide sidebar and return focus to editor (Space + e again)
  {
    "key": "space e",
    "command": "runCommands",
    "args": {
      "commands": [
        "workbench.action.toggleSidebarVisibility",
        "workbench.action.focusActiveEditorGroup"
      ]
    },
    "when": "sideBarFocus && !inputFocus"
  },

  // --- Explorer shortcuts ---
  {
    "key": "r",
    "command": "renameFile",
    "when": "filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "key": "c",
    "command": "filesExplorer.copy",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "p",
    "command": "filesExplorer.paste",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "x",
    "command": "filesExplorer.cut",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "d",
    "command": "deleteFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "a",
    "command": "explorer.newFile",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "shift+a",
    "command": "explorer.newFolder",
    "when": "filesExplorerFocus && !inputFocus"
  },
  {
    "key": "s",
    "command": "explorer.openToSide",
    "when": "filesExplorerFocus && !inputFocus"
  },

  // Open file or toggle folder with Enter
  {
    "key": "enter",
    "command": "explorer.openAndPassFocus",
    "when": "filesExplorerFocus && !explorerResourceIsFolder && !inputFocus"
  },
  {
    "key": "enter",
    "command": "list.toggleExpand",
    "when": "filesExplorerFocus && explorerResourceIsFolder && !inputFocus"
  },

  // =========================
  // ======= TERMINAL ========
  // =========================

  // Toggle terminal panel visibility (Ctrl + Shift + T)
  { "key": "ctrl+shift+t", "command": "workbench.action.togglePanel" },

  // Focus next terminal (Ctrl + Shift + B)
  {
    "key": "ctrl+shift+b",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },

  // Focus previous terminal (Ctrl + Shift + A)
  {
    "key": "ctrl+shift+a",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },

  // New terminal (Ctrl + Shift + N)
  {
    "key": "ctrl+shift+n",
    "command": "workbench.action.terminal.new",
    "when": "terminalFocus"
  },

  // Kill terminal (Ctrl + Shift + Q)
  {
    "key": "ctrl+shift+q",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },

  // Open terminal in editor (Ctrl + \)
  { "key": "ctrl+\\", "command": "workbench.action.createTerminalEditor" },

  // Open terminal to the side (Ctrl + ')
  { "key": "ctrl+'", "command": "workbench.action.createTerminalEditorSide" },

  // =========================
  // ======= AUTOCOMPLETE =====
  // =========================

  // Navigate autocomplete suggestions with Tab / Shift+Tab
  {
    "key": "tab",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },

  // Navigate quick input lists (file pickers, etc.)
  {
    "key": "tab",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "shift+tab",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },

  // Navigate code action menu
  {
    "key": "tab",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },
  {
    "key": "shift+tab",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },

  // Close marker navigation (Escape)
  {
    "key": "escape",
    "command": "closeMarkersNavigation",
    "when": "editorFocus && markersNavigationVisible"
  },

  // =========================
  // ======= FILE OPS ========
  // =========================

  // Open new untitled file (Alt + N)
  {
    "key": "alt+n",
    "command": "workbench.action.files.newUntitledFile"
  },

  // Close active file (Alt + X)
  {
    "key": "alt+x",
    "command": "workbench.action.closeActiveEditor"
  },

  // Run and stop code runner
  {
    "key": "alt+r",
    "command": "code-runner.run"
  },
  {
    "key": "alt+s",
    "command": "code-runner.stop"
  }
]
