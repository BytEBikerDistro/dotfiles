####################################################################
# COMMON ALIASES
####################################################################
alias q="exit"
alias c="clear"
alias f="find . | grep "
alias mkdir='mkdir -pv'
alias mv='mv -iv'
alias cp='cp -rfiv'
alias rm='rm -rfIv'
alias ls='eza --icons'
alias la='eza --icons -a'
alias ll='eza --icons -lah'
alias lt='eza --icons --tree'
alias lta='eza --icons --tree -lah'
alias preview="fzf --preview='bat --color=always --style=numbers --theme=OneHalfDark {}' --preview-window=down"
alias fnvim='nvim $(fzf -m --preview="bat --color=always --style=numbers --theme=OneHalfDark {}" --preview-window=down)'
alias fvim='vim $(fzf -m --preview="bat --color=always --style=numbers --theme=OneHalfDark {}" --preview-window=down)'
alias fcd="cd \$(find . -type d | fzf)"
if command -v batcat &>/dev/null; then
    alias cat='batcat --theme=OneHalfDark'
else
    alias cat='bat --theme=OneHalfDark
fi
alias psu="ps aux"
alias psg="ps aux | grep -i" # Usage: psg process_name
alias kill9="kill -9"
alias myip="curl ifconfig.me" # Show public IP
alias speedtest="curl -s https://raw.githubusercontent.com/noreplyui5/speedtest-cli/master/speedtest.py | python"

#######################################################
# SPECIAL FUNCTIONS
#######################################################
# Extracts any archive(s)
extract() {
    local archive="$1"

    # Check if the archive exists
    if [[ ! -f "$archive" ]]; then
        echo "[x] $archive doesn't exist"
        return 1
    fi

    echo "[i] Archive: $archive"
    echo "[i] Size: $(du -h "$archive" | cut -f1)"
    echo "[i] Type: $(file -b "$archive")"
    echo

    # Get absolute paths
    local archive_dir
    archive_dir=$(dirname "$(realpath "$archive")")
    local archive_name
    archive_name=$(basename "$archive")

    # Remember existing files before extraction
    local temp_before
    temp_before=$(mktemp)
    find "$archive_dir" -maxdepth 1 ! -path "$archive_dir" -printf '%f\n' 2>/dev/null | sort >"$temp_before"

    # Handle different archive formats with verbose output
    case "$archive" in
    *.tar.gz | *.tgz)
        echo "[✓] Extracting tar.gz archive: $archive"
        (cd "$archive_dir" && tar -xzvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.xz | *.txz)
        echo "[✓] Extracting tar.xz archive: $archive"
        (cd "$archive_dir" && tar -xJvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.bz2 | *.tbz2 | *.tbz)
        echo "[✓] Extracting tar.bz2 archive: $archive"
        (cd "$archive_dir" && tar -xjvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.Z | *.tZ)
        echo "[✓] Extracting tar.Z archive: $archive"
        (cd "$archive_dir" && tar -xZvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.lz | *.tlz)
        echo "[✓] Extracting tar.lz archive: $archive"
        (cd "$archive_dir" && tar --lzip -xvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.lzma)
        echo "[✓] Extracting tar.lzma archive: $archive"
        (cd "$archive_dir" && tar --lzma -xvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.lzo)
        echo "[✓] Extracting tar.lzo archive: $archive"
        (cd "$archive_dir" && tar --lzop -xvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar.zst | *.tzst)
        echo "[✓] Extracting tar.zst archive: $archive"
        (cd "$archive_dir" && tar --zstd -xvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.tar)
        echo "[✓] Extracting tar archive: $archive"
        (cd "$archive_dir" && tar -xvf "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.bz2)
        echo "[✓] Extracting bz2 file: $archive"
        (cd "$archive_dir" && bunzip2 -v "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.gz)
        echo "[✓] Extracting gz file: $archive"
        (cd "$archive_dir" && gunzip -v "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.xz)
        echo "[✓] Extracting xz file: $archive"
        (cd "$archive_dir" && unxz -v "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.lzma)
        echo "[✓] Extracting lzma file: $archive"
        (cd "$archive_dir" && unlzma -v "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.Z)
        echo "[✓] Extracting Z file: $archive"
        (cd "$archive_dir" && uncompress -v "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.lz)
        echo "[✓] Extracting lz file: $archive"
        (cd "$archive_dir" && lzip -dv "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.lzo)
        echo "[✓] Extracting lzo file: $archive"
        (cd "$archive_dir" && lzop -dv "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.zst)
        echo "[✓] Extracting zstd file: $archive"
        (cd "$archive_dir" && zstd -dv "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.7z)
        echo "[✓] Extracting 7z archive: $archive"
        (cd "$archive_dir" && 7z x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.zip | *.jar | *.war | *.ear | *.apk)
        echo "[✓] Extracting zip-based archive: $archive"
        (cd "$archive_dir" && unzip "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.rar)
        echo "[✓] Extracting rar archive: $archive"
        (cd "$archive_dir" && unrar x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.ace)
        echo "[✓] Extracting ace archive: $archive"
        (cd "$archive_dir" && unace x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.arj)
        echo "[✓] Extracting arj archive: $archive"
        (cd "$archive_dir" && arj e "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.cab)
        echo "[✓] Extracting cab archive: $archive"
        (cd "$archive_dir" && cabextract "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.lha | *.lzh)
        echo "[✓] Extracting lha/lzh archive: $archive"
        (cd "$archive_dir" && lha x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.deb)
        echo "[✓] Extracting deb package: $archive"
        (cd "$archive_dir" && ar x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.cpio)
        echo "[✓] Extracting cpio archive: $archive"
        (cd "$archive_dir" && cpio -idmv <"$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *.a)
        echo "[✓] Extracting ar archive: $archive"
        (cd "$archive_dir" && ar x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            return 1
        }
        ;;
    *)
        (cd "$archive_dir" && 7z x "$archive_name") || {
            echo "[x] Failed to extract $archive"
            echo "[i] Supported formats:"
            echo "    Tar: .tar, .tar.gz/.tgz, .tar.xz/.txz, .tar.bz2/.tbz2/.tbz"
            echo "    Tar: .tar.Z/.tZ, .tar.lz/.tlz, .tar.lzma, .tar.lzo, .tar.zst/.tzst"
            echo "    Compressed: .gz, .bz2, .xz, .lzma, .Z, .lz, .lzo, .zst"
            echo "    Archives: .zip, .7z, .rar, .ace, .arj, .cab, .lha/.lzh"
            echo "    Packages: .rpm, .deb, .jar, .war, .ear, .apk"
            echo "    Other: .cpio, .a"
            return 1
        }
        ;;
    esac

    echo
    echo "[✓] Successfully extracted $archive"

 # Clean up temporary file
    rm -f "$temp_before"
}

# Quick backup of a file or directory
backup() {
    local item="$1"
    if [[ -z "$item" ]]; then
        echo "[x] Usage: backup <file_or_directory>"
        return 1
    fi

    local backup_name
    backup_name="${item}.backup.$(date +%Y%m%d_%H%M%S)"
    echo "[i] Creating backup: $backup_name"

    if [[ -d "$item" ]]; then
        cp -rv "$item" "$backup_name"
    else
        cp -v "$item" "$backup_name"
    fi

    echo "[✓] Backup created: $backup_name"
}

# Calculate file checksums
checksum() {
    local file="$1"
    if [[ -z "$file" ]] || [[ ! -f "$file" ]]; then
        echo "[x] Usage: checksum <file>"
        return 1
    fi

    echo "[i] Checksums for: $file"
    echo "  MD5:    $(md5sum "$file" | cut -d' ' -f1)"
    echo "  SHA1:   $(sha1sum "$file" | cut -d' ' -f1)"
    echo "  SHA256: $(sha256sum "$file" | cut -d' ' -f1)"
}

